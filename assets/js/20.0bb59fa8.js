(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{376:function(t,e,a){"use strict";a.r(e);var s=a(12),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("I recently had a phone interview for a position as a software engineer and one of the questions I was asked was to define iteration and recursion and explain the differences between the two.  I knew what iteration was, but drew a complete blank when it came to recursion.  I've to decided to take this opportunity to write about it and try to explain the differences between the two.")]),t._v(" "),a("h2",{attrs:{id:"definitions-from-good-old-wikipedia"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definitions-from-good-old-wikipedia"}},[t._v("#")]),t._v(" Definitions from good old Wikipedia")]),t._v(" "),a("p",[a("strong",[t._v("Iteration")]),t._v(" - The act of repeating a process with the aim of approaching a desired goal, target or result.")]),t._v(" "),a("p",[a("strong",[t._v("Recursion")]),t._v(" - The process of repeating items in a self-similar way.")]),t._v(" "),a("h2",{attrs:{id:"digging-deeper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#digging-deeper"}},[t._v("#")]),t._v(" Digging deeper")]),t._v(" "),a("h3",{attrs:{id:"iteration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iteration"}},[t._v("#")]),t._v(" Iteration")]),t._v(" "),a("p",[t._v("In my own words as related to computer science I would define iteration as a way of repeating an operation a certain number of times or until a certain condition is met.  The most common occurrence of iteration that I come across is the act of looping through an array of values.  Here's a few examples of iteration written in Ruby that will produce the same result of printing out the numbers 1 through 10.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# times method")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.")]),t._v("times "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  puts i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# each method on a range")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("each")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  puts val\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# while loop")]),t._v("\ni "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n  puts i\n  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for loop")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".10")]),t._v("\n  puts i\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("h3",{attrs:{id:"recursion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#recursion"}},[t._v("#")]),t._v(" Recursion")]),t._v(" "),a("p",[t._v("I would describe recursion as calling a method or function from within itself.  At first it sounded like this could cause an infinite loop, but if you set a conditional then the function will perform until a conditional is met.  Here's the 1 to 10 example using recursion.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("plus_one")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  puts i\n  plus_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# call the method")]),t._v("\nplus_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("I hadn't put much thought into it before, but I realize that I have been using recursion on almost a daily basis.  I've noticed that I have to attach the "),a("code",[t._v("-r")]),t._v(" flag to the bash command "),a("code",[t._v("cp")]),t._v(" when I want to copy over the entire contents of the folder and all of its subdirectories.  I don't know all the details, but the recursive flag basically calls the cp command again in each subdirectory and so own.")]),t._v(" "),a("p",[t._v("There appear to be limits on recursion in the Ruby programming language, because if I try the recursion example and change it to print from 1 to 10,000, then I get the following error after the 9,340 time:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("SystemStackError: stack level too deep\n")])])]),a("p",[t._v("I would appreciate any comments or thoughts as to why this occurs.")]),t._v(" "),a("h2",{attrs:{id:"thoughts-on-iteration-and-recursion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thoughts-on-iteration-and-recursion"}},[t._v("#")]),t._v(" Thoughts on Iteration and Recursion")]),t._v(" "),a("p",[t._v("As seen above you could produce a similar result whether or not you use iteration or recursion.  For the 1 to 10 example it makes more sense to use iteration for simplicity sake.  I imagine that recursion could come in handy for a more complicated task.")])])}),[],!1,null,null,null);e.default=r.exports}}]);